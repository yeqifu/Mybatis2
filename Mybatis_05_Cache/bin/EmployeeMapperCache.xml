<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yeqifu.mybatis.dao.EmployeeMapperCache">
	<!-- 使用ehcache作为二级缓存 -->
	<cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>

	<!-- 开启二级缓存 -->
	<!-- <cache eviction="FIFO" flushInterval="60000" readOnly="false" size="1024"></cache> -->
	<!--  
		eviction:缓存的回收策略：
			• LRU – 最近最少使用的：移除最长时间不被使用的对象。
			• FIFO – 先进先出：按对象进入缓存的顺序来移除它们。
			• SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。
			• WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。
			• 默认的是 LRU。
		flushInterval：缓存刷新间隔
			缓存多长时间清空一次，默认不清空，设置一个毫秒值
		readOnly:是否只读：
			true：只读；mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。
					 mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快
			false：非只读：mybatis觉得获取的数据可能会被修改。
					mybatis会利用序列化&反序列的技术克隆一份新的数据给你。安全，速度慢
		size：缓存存放多少元素；
		type=""：指定自定义缓存的全类名；
				实现Cache接口即可；
	-->
	
	<sql id="Base_Column">
		id,last_name,email,gender
	</sql>

	<select id="getEmployeeById" resultType="com.yeqifu.mybatis.bean.Employee" useCache="true">
		select 
		<include refid="Base_Column"/>
		from tbl_employee
		where id = #{id}
	</select>
	
	<insert id="addEmployee">
		insert into tbl_employee(last_name,gender,email,d_id) values(#{lastName},#{gender},#{email},#{d_id})
	</insert>
	
	<select id="getEmployeeByConditionIf" resultType="com.yeqifu.mybatis.bean.Employee">
		select *
		from tbl_employee
		<!-- 
			查询的时候如果某些条件没带可能sql拼装会有问题：
				1、给where后面加上1=1，以后的条件都and xxx.
				2、mybatis使用where标签来将所有的查询条件包括在内。mybatis就会将where标签中拼装的sql，多出来的and或者or去掉
				   where只会去掉第一个多出来的and或者or。 
		-->
		<where>
			<!-- 
				test：判断表达式
				从参数中取值进行判断
			 -->
			<if test="id!=null">
				id=#{id}
			</if>
			<if test="lastName!=null and lastName!=''">
				and last_name like #{lastName} 
			</if>
			<if test="email!=null">
				and email = #{email} 
			</if>
			<if test="gender==0 or gender==1">
				and gender = #{gender}
			</if>
		</where>
	</select>
	
	<select id="getEmployeeByConditionTrim" resultType="com.yeqifu.mybatis.bean.Employee">
		select *
		from tbl_employee
		<!-- 
			后面多出的and或者or  where标签不能解决
			trim：trim标签体中是整个字符串拼串后的结果
			prefix=""：前缀
					   prefix给拼串后的整个字符串加一个前缀
			prefixOverrides=""：
					   前缀覆盖：去掉整个字符串前面多余的字符
			suffix=""：后缀		
					   suffix给拼串后的整个字符串加一个后缀
		    suffixOverrides=""：
		    		 后缀覆盖：去掉整个字符串后面多余的字符   
		 -->
		 <!-- 自定义字符串的截取规则 -->
		<trim prefix="where" suffixOverrides="and">
			<if test="id!=null">
				id=#{id} and
			</if>
			<if test="lastName!=null and lastName!=''">
				last_name like #{lastName} and
			</if>
			<if test="email!=null">
				email = #{email} and
			</if>
			<if test="gender==0 or gender==1">
				gender = #{gender}
			</if>
		</trim>
	</select>
	
	<select id="getEmployeeByConditionChoose" resultType="com.yeqifu.mybatis.bean.Employee">
		select *
		from tbl_employee
		<where>
			<!-- 如果带了id就用id查，如果带了lastName就用lastName查，如果带了email就用email查;只会进入其中一个 -->
			<choose>
				<when test="id!=null">
					id=#{id}
				</when>
				<when test="lastName!=null">
					last_name like #{lastName}
				</when>
				<when test="email!=null">
					email = #{email}
				</when>
				<otherwise>
					gender=0
				</otherwise>
			</choose>
		</where>
	</select>
	
	<update id="updateEmployeeById">
<!-- 		update tbl_employee 
		<set>
			<if test="lastName!=null">
				last_name=#{lastName},
			</if>
			<if test="email!=null">
				email=#{email},
			</if>
			<if test="gender!=null">
				gender=#{gender}
			</if>
		</set>
		where id=#{id} -->
		update tbl_employee 
		<trim prefix="set" suffixOverrides=",">
			<if test="lastName!=null">
				last_name=#{lastName},
			</if>
			<if test="email!=null">
				email=#{email},
			</if>
			<if test="gender!=null">
				gender=#{gender}
			</if>
		</trim>
		where id=#{id}
	</update>
	
	<select id="getEmployeeByConditionForeach" resultType="com.yeqifu.mybatis.bean.Employee">
		select * 
		from tbl_employee
		where id in
		<!-- 
			collection：指定要遍历的集合：
				list类型的参数会特殊处理封装在map中，map的key就叫list
			item：将当前遍历出的元素赋值给指定的变量
			separator：每个元素之间的分隔符
			open：遍历出所有结果拼接一个开始的字符
			close：遍历出所有结果拼接一个结束的字符
			#{变量名}就能取出变量的值也就是当前遍历出的元素
		 -->
		<foreach collection="ids" item="id" separator="," open="(" close=")">
			#{id}
		</foreach>
	</select>
	
	<!-- 使用foreach批量添加employee -->
	<!-- 方式一： -->
<!-- 	<insert id="addEmployes">
		insert into tbl_employee(last_name,gender,email,d_id)
		values
		<foreach collection="employees" item="employee" separator=",">
			(#{employee.lastName},#{employee.gender},#{employee.email},#{employee.department.id})
		</foreach>
	</insert> -->
	
	<!-- 方式二：这种方式需要开启allowMultiQueries=true
				这种分号分隔多个sql可以用于其它的批量操作（删除，修改等）
	 -->
	<insert id="addEmployes">
		<foreach collection="employees" item="employee" separator=";">
			insert into tbl_employee(last_name,gender,email,d_id)
			values (#{employee.lastName},#{employee.gender},#{employee.email},#{employee.department.id})
		</foreach>
	</insert>
	
	<!-- bind标签 -->
	<select id="getEmployeeBylastName" resultType="com.yeqifu.mybatis.bean.Employee">
		<bind name="lastName" value="'_'+lastName+'%'"/>
		select * 
		from tbl_employee
		where last_name like #{lastName}
	</select>
	
</mapper>




















