<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yeqifu.mybatis.dao.EmployeeMapperPlus">
	<!-- 
		自定义某个javaBean的封装规则 
		type：自定义规则的java类型
		id：唯一id，方便引用
	-->
	<resultMap type="com.yeqifu.mybatis.bean.Employee" id="myEmployee">
		<!-- 
			指定主键列的封装规则
			id定义主键会有底层优化
			column：指定那一列
			property：指定对应的javaBean属性
		 -->
		<id column="id" property="id"/>
		
		<!-- 
			定义普通列的封装规则
			column：指定那一列
			property：指定对应的javaBean属性
		 -->
		<result column="last_name" property="lastName"/>
		<!-- 其它不指定的列会自动封装：但是推荐只要写resultMap就把全部的映射规则都写上 -->
		<result column="gender" property="gender"/>
		<result column="email" property="email"/>
	</resultMap>
	<!-- resultMap：自定义结果集映射规则 -->
	<select id="getEmployeeById" resultMap="myEmployee">
		select * from tbl_employee where id=#{id}
	</select>
	
	<!-- 
		场景一：查询employee的同时查询员工对应的部门
			   id  last_name  email  gender  d_id  did  dept_name
	 -->
	<!-- 
		联合查询：级联属性封装结果集
	 -->
	 <resultMap type="com.yeqifu.mybatis.bean.Employee" id="myDifEmployee">
	 	<result column="id" property="id"/>
	 	<result column="last_name" property="lastName"/>
	 	<result column="email" property="email"/>
	 	<result column="gender" property="gender"/>
	 	<result column="did" property="department.id"/>
	 	<result column="dept_name" property="department.departName"/>
	 </resultMap>
	 
	 <resultMap type="com.yeqifu.mybatis.bean.Employee" id="myDifEmployee2">
	 	<result column="id" property="id"/>
	 	<result column="last_name" property="lastName"/>
	 	<result column="email" property="email"/>
	 	<result column="gender" property="gender"/>
	 	<!-- 
	 		association可以指定联合的javaBean对象
	 		property="deptment"：指定那个属性是联合的对象
	 		javaType：指定这个属性对象的类型【不能省略 】
	 	 -->
	 	<association property="department" javaType="com.yeqifu.mybatis.bean.Department">
	 		<id column="did" property="id"/>
			<id column="dept_name" property="departName"/>
	 	</association>
	 </resultMap>
	 
	 <!-- 使用association进行分步查询 -->
	 <resultMap type="com.yeqifu.mybatis.bean.Employee" id="myDifEmployee3">
	 	<result column="id" property="id"/>
	 	<result column="last_name" property="lastName"/>
	 	<result column="email" property="email"/>
	 	<result column="gender" property="gender"/>
	 	<!-- 
	 		association定义关联对象的封装规则
	 		select：表明当前属性是调用select指定的方法查出的结果
	 		column：指定将那一列的值传给这个方法
	 		流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property
	 	 -->
	 	<association property="department" 
	 				 select="com.yeqifu.mybatis.dao.DepartmentMapper.getDepartmentById" column="did">
	 	</association>
	 </resultMap>
	 
	 <select id="getEmployeeAndDept" resultMap="myDifEmployee3">
	 	select e.id,e.last_name,e.email,e.gender,d.id did,d.dept_name from tbl_employee e,tbl_dept d where e.d_id=d.id and d.id=#{id};
	 </select>
	 <!-- 
	 	使用association可以使用延迟加载（懒加载）
	 	我们每次查询Employee对象的时候，都将部门一起查询出来了
	 	但是部门信息可以在我们使用的时候再去查询
	 	我们只需在分段查询的基础之上再加上两个配置
	  -->

</mapper>



















